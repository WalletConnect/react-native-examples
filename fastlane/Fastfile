# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

ENV["FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT"] = "120"

default_platform(:ios)

platform :ios do

  lane :build do |options|
    xcodebuild(
      project: options[:project],
      scheme: options[:scheme],
      destination: 'platform=iOS Simulator,name=iPhone 14',
      xcargs: "-clonedSourcePackagesDirPath SourcePackagesCache -derivedDataPath DerivedDataCache"
    )
  end

  lane :resolve do |options|
    xcodebuild(
      project: options[:project],
      scheme: options[:scheme],
      destination: 'platform=iOS Simulator,name=iPhone 13',
      xcargs: "-resolvePackageDependencies -clonedSourcePackagesDirPath SourcePackagesCache -derivedDataPath DerivedDataCache"
    )
  end

  lane :release_testflight do |options|
    api_key = app_store_connect_api_key(
      key_id: ENV["APPLE_KEY_ID"],
      issuer_id: ENV["APPLE_ISSUER_ID"],
      key_content: ENV["APPLE_KEY_CONTENT"],            
      duration: 1200,            
      in_house: false,
    )
    match(
      readonly: false,
      type: "appstore",
      app_identifier: ENV["MATCH_IDENTIFIERS"],
      git_url: "https://github.com/WalletConnect/match-swift.git",
      git_basic_authorization: options[:token],
      api_key: api_key,
      include_all_certificates: true,
      force_for_new_devices: true,
      force_for_new_certificates: true
    )
    number = latest_testflight_build_number(
      app_identifier: ENV["APP_IDENTIFIER"],
      username: options[:username],
    )
    increment_build_number(
      build_number: number + 1,
      xcodeproj: options[:project]
    )
    gym(
      configuration: "Release",
      project: options[:project],
      scheme: ENV["SCHEME"],
      export_method: "app-store",
    )
    upload_to_testflight(
      apple_id: ENV["APPLE_ID"],
      app_identifier: ENV["APP_IDENTIFIER"],
      changelog: "#{ENV["SCHEME"]} app weekly build ðŸš€",
      distribute_external: true,
      notify_external_testers: true,
      skip_waiting_for_build_processing: false,
      groups: ["WalletConnect Users"]
    )
    clean_build_artifacts()
  end


end

platform :android do
  
  private lane :build do |options|
    gradle(task: "clean", project_dir: options[:project])
    gradle(
      task: "assemble",
      project_dir: options[:project],
      build_type: "Release",
      print_command: false,
    )
  end
  
  lane :release_firebase do |options|
      build(project: options[:project])

      release = firebase_app_distribution(
          app: options[:app_id],
          # testers: "tester1@company.com, tester2@company.com",
          release_notes: "app weekly build ðŸš€"
      )
  end
  
end